// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

generator zod {
  provider = "prisma-zod-generator"
  output   = "./zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  createdAt DateTime @default(now())

  id           String @id @default(cuid())
  firstName    String
  lastName     String
  email        String @unique
  phoneNumber  String
  username     String @unique
  passwordHash String

  psychologists Psychologist[]
  patients      Patient[]
}

model Comment {
  createdAt DateTime @default(now())

  id          String @id @default(cuid())
  sessionId   String @unique
  description String
  rating      Float

  session TherapySession @relation(fields: [sessionId], references: [id])
}

model Tag {
  createdAt DateTime @default(now())

  id       String @id @default(cuid())
  name     String
  category String

  psychologistsTags PsychologistTag[]
  patientTags       PatientTag[]
}

model PsychologistTag {
  createdAt DateTime @default(now())

  id             String @id @default(cuid())
  psychologistId String @unique
  tagId          String @unique

  psychologist Psychologist @relation(fields: [psychologistId], references: [id])
  tag          Tag          @relation(fields: [tagId], references: [id])
}

model PatientTag {
  createdAt DateTime @default(now())

  id        String @id @default(cuid())
  patientId String @unique
  tagId     String @unique

  patient Patient @relation(fields: [patientId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])
}

model TherapySession {
  createdAt DateTime @default(now())

  id             String   @id @default(cuid())
  patientId      String   @unique
  psychologistId String   @unique
  date           DateTime
  sessionTierId  String   @unique
  isCompleted    Boolean  @default(false)

  patient      Patient            @relation(fields: [patientId], references: [id])
  psychologist Psychologist       @relation(fields: [psychologistId], references: [id])
  comments     Comment[]
  sessionTier  TherapySessionTier @relation(fields: [sessionTierId], references: [id])
}

model Patient {
  createdAt DateTime @default(now())

  id     String @id @default(cuid())
  userId String @unique

  user        User             @relation(fields: [userId], references: [id])
  sessions    TherapySession[]
  patientTags PatientTag[]
}

model TherapySessionTier {
  createdAt DateTime @default(now())

  id          String @id @default(cuid())
  title       String
  price       Int
  durationMin Int
  description String

  sessions TherapySession[]
}

model Psychologist {
  createdAt DateTime @default(now())

  id            String  @id @default(cuid())
  qualification String
  aboutMe       String
  userId        String  @unique
  isVerified    Boolean @default(false)

  psychologistsTags PsychologistTag[]
  sessions          TherapySession[]
  user              User              @relation(fields: [userId], references: [id])
}
